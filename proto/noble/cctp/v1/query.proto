syntax = "proto3";

package noble.cctp.v1;

import "noble/cctp/v1/authority.proto";
import "noble/cctp/v1/burning_and_minting_paused.proto";
import "noble/cctp/v1/max_message_body_size.proto";
import "noble/cctp/v1/params.proto";
import "noble/cctp/v1/per_message_burn_limit.proto";
import "noble/cctp/v1/attester.proto";
import "noble/cctp/v1/sending_and_receiving_messages_paused.proto";
import "noble/cctp/v1/signature_threshold.proto";
import "noble/cctp/v1/token_pair.proto";
import "noble/cctp/v1/token_messenger.proto";
import "noble/cctp/v1/nonce.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/circlefin/noble-cctp/x/cctp/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/noble/cctp/v1/params";
  }
  // Queries the Authority
  rpc Authority(QueryGetAuthorityRequest) returns (QueryGetAuthorityResponse) {
    option (google.api.http).get = "/noble/cctp/v1/authority";
  }
  // Queries an Attester by index
  rpc Attester(QueryGetAttesterRequest) returns (QueryGetAttesterResponse) {
    option (google.api.http).get = "/noble/cctp/v1/attesters/{attester}";
  }
  // Queries a list of Attesters
  rpc Attesters(QueryAllAttestersRequest) returns (QueryAllAttestersResponse) {
    option (google.api.http).get = "/noble/cctp/v1/attesters";
  }
  // Queries the PerMessageBurnLimit
  rpc PerMessageBurnLimit(QueryGetPerMessageBurnLimitRequest) returns (QueryGetPerMessageBurnLimitResponse) {
    option (google.api.http).get = "/noble/cctp/v1/per_message_burn_limit";
  }
  // Queries BurningAndMintingPaused
  rpc BurningAndMintingPaused(QueryGetBurningAndMintingPausedRequest) returns (QueryGetBurningAndMintingPausedResponse) {
    option (google.api.http).get = "/noble/cctp/v1/burning_and_minting_paused";
  }
  // Queries SendingAndReceivingPaused
  rpc SendingAndReceivingMessagesPaused(QueryGetSendingAndReceivingMessagesPausedRequest) returns (QueryGetSendingAndReceivingMessagesPausedResponse) {
    option (google.api.http).get = "/noble/cctp/v1/sending_and_receiving_messages_paused";
  }
  // Queries the MaxMessageBodySize
  rpc MaxMessageBodySize(QueryGetMaxMessageBodySizeRequest) returns (QueryGetMaxMessageBodySizeResponse) {
    option (google.api.http).get = "/noble/cctp/v1/max_message_body_size";
  }
  // Queries the NextAvailableNonce
  rpc NextAvailableNonce(QueryGetNextAvailableNonceRequest) returns (QueryGetNextAvailableNonceResponse) {
    option (google.api.http).get = "/noble/cctp/v1/next_available_nonce";
  }
  // Queries the SignatureThreshold
  rpc SignatureThreshold(QueryGetSignatureThresholdRequest) returns (QueryGetSignatureThresholdResponse) {
    option (google.api.http).get = "/noble/cctp/v1/signature_threshold";
  }
  // Queries a TokenPair by index
  rpc TokenPair(QueryGetTokenPairRequest) returns (QueryGetTokenPairResponse) {
    option (google.api.http).get = "/noble/cctp/v1/token_pairs/{remote_domain}/{remote_token}";
  }
  // Queries a list of TokenPair
  rpc TokenPairs(QueryAllTokenPairsRequest) returns (QueryAllTokenPairsResponse) {
    option (google.api.http).get = "/noble/cctp/v1/token_pairs";
  }
  // Queries a UsedNonce by index
  rpc UsedNonce(QueryGetUsedNonceRequest) returns (QueryGetUsedNonceResponse) {
    option (google.api.http).get = "/noble/cctp/v1/used_nonces/{nonce}";
  }
  // Queries a list of UsedNonces
  rpc UsedNonces(QueryAllUsedNoncesRequest) returns (QueryAllUsedNoncesResponse) {
    option (google.api.http).get = "/noble/cctp/v1/used_nonces";
  }
  // Queries a TokenMessenger by index
  rpc TokenMessenger(QueryGetTokenMessengerRequest) returns (QueryGetTokenMessengerResponse) {
      option (google.api.http).get = "/noble/cctp/v1/token_messengers/{domain_id}";
  }
  // Queries a list of TokenMessenger
  rpc TokenMessengers(QueryAllTokenMessengersRequest) returns (QueryAllTokenMessengersResponse) {
    option (google.api.http).get = "/noble/cctp/v1/token_messengers";
  }
  // TODO add queries for message_body_version, noble_message_version, local_domain
//  rpc MessageBodyVersion(QueryGetMessageBodyVersionRequest) returns (QueryGetMessageBodyVersionResponse) {
//    option (google.api.http).get = "/noble/cctp/v1/message_body_version";
//  }
//
//  rpc NobleMessageVersion(QueryGetNobleMessageVersionRequest) returns (QueryGetNobleMessageVersionResponse) {
//    option (google.api.http).get = "/noble/cctp/v1/noble_message_version";
//  }
//
//  rpc LocalDomain(QueryGetLocalDomainRequest) returns (QueryGetLocalDomainResponse) {
//    option (google.api.http).get = "/noble/cctp/v1/local_domain";
//  }

}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryAuthorityRequest is the request type for the Query/Authority RPC method.
message QueryGetAuthorityRequest {}

// QueryAuthorityResponse is the response type for the Query/Authority RPC method.
message QueryGetAuthorityResponse {
  Authority authority = 1 [(gogoproto.nullable) = false];
}

// QueryAttestersRequest is the request type for the Query/Attester RPC method.
message QueryGetAttesterRequest {
  string attester = 1;
}

// QueryAttestersResponse is the response type for the Query/Attester RPC method.
message QueryGetAttesterResponse {
  Attester attester = 1 [(gogoproto.nullable) = false];
}

// QueryAllAttestersRequest is the request type for the Query/Attesters RPC method.
message QueryAllAttestersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllAttestersResponse is the response type for the Query/Attesters RPC method.
message QueryAllAttestersResponse {
  repeated Attester attester = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPerMessageBurnLimitRequest is the request type for the Query/PerMessageBurnLimit RPC method.
message QueryGetPerMessageBurnLimitRequest {
  string denom = 1;
}

// QueryPerMessageBurnLimitResponse is the response type for the Query/PerMessageBurnLimit RPC method.
message QueryGetPerMessageBurnLimitResponse {
  PerMessageBurnLimit amount = 1 [(gogoproto.nullable) = false];
}

// QueryBurningAndMintingPausedRequest is the request type for the Query/BurningAndMintingPaused RPC method.
message QueryGetBurningAndMintingPausedRequest {}

// QueryBurningAndMintingPausedResponse is the response type for the Query/BurningAndMintingPaused RPC method.
message QueryGetBurningAndMintingPausedResponse {
  BurningAndMintingPaused paused = 1 [(gogoproto.nullable) = false];
}

// QuerySendingAndReceivingPausedRequest is the request type for the Query/SendingAndReceivingPaused RPC method.
message QueryGetSendingAndReceivingMessagesPausedRequest {}

// QuerySendingAndReceivingPausedResponse is the response type for the Query/SendingAndReceivingPaused RPC method.
message QueryGetSendingAndReceivingMessagesPausedResponse {
  SendingAndReceivingMessagesPaused paused = 1 [(gogoproto.nullable) = false];
}

// QueryMaxMessageBodySizeRequest is the request type for the Query/MaxMessageBodySize RPC method.
message QueryGetMaxMessageBodySizeRequest {}

// QueryMaxMessageBodySizeResponse is the response type for the Query/MaxMessageBodySize RPC method.
message QueryGetMaxMessageBodySizeResponse {
  MaxMessageBodySize amount = 1 [(gogoproto.nullable) = false];
}

// QueryGetNextAvailableNonceRequest is the request type for the Query/NextAvailableNonce RPC method.
message QueryGetNextAvailableNonceRequest {}

// Query QueryGetNextAvailableNonceResponse is the response type for the Query/NextAvailableNonce RPC method.
message QueryGetNextAvailableNonceResponse {
  Nonce nonce = 1 [(gogoproto.nullable) = false];
}

// QuerySignatureThresholdRequest is the request type for the Query/SignatureThreshold RPC method.
message QueryGetSignatureThresholdRequest {}

// QuerySignatureThresholdResponse is the response type for the Query/SignatureThreshold RPC method.
message QueryGetSignatureThresholdResponse {
  SignatureThreshold amount = 1 [(gogoproto.nullable) = false];
}

// QueryGetTokenPairRequest is the request type for the Query/TokenPair RPC method.
message QueryGetTokenPairRequest {
  uint32 remote_domain = 1;
  string remote_token = 2;
}

// QueryGetTokenPairResponse is the response type for the Query/TokenPair RPC method.
message QueryGetTokenPairResponse {
  TokenPair pair = 1 [(gogoproto.nullable) = false];
}

// QueryAllTokenPairsRequest is the request type for the Query/TokenPairs RPC method.
message QueryAllTokenPairsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllTokenPairsResponse is the response type for the Query/TokenPairs RPC method.
message QueryAllTokenPairsResponse {
  repeated TokenPair token_pairs = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGetUsedNonceRequest is the request type for the Query/UsedNonce RPC method.
message QueryGetUsedNonceRequest {
  uint64 nonce = 1;
}

// QueryGetUsedNonceResponse is the response type for the Query/UsedNonce RPC method.
message QueryGetUsedNonceResponse {
  Nonce nonce = 1 [(gogoproto.nullable) = false];
}

// QueryAllUsedNonceRequest is the request type for the Query/UsedNonces RPC method.
message QueryAllUsedNoncesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllUsedNonceResponse is the response type for the Query/UsedNonces RPC method.
message QueryAllUsedNoncesResponse {
  repeated Nonce used_nonces = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGetTokenMessengerRequest is the request type for the Query/TokenMessenger RPC method.
message QueryGetTokenMessengerRequest {
  uint32 domain_id = 1;
}

// QueryGetTokenMessengerResponse is the response type for the Query/TokenMessenger RPC method.
message QueryGetTokenMessengerResponse {
  TokenMessenger token_messenger = 1 [(gogoproto.nullable) = false];
}

// QueryAllTokenMessengersRequest is the request type for the Query/TokenMessengers RPC method.
message QueryAllTokenMessengersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllTokenMessengersResponse is the response type for the Query/TokenMessengers RPC method.
message QueryAllTokenMessengersResponse {
  repeated TokenMessenger token_messengers = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
